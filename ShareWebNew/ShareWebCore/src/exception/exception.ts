import { OpType } from '../optype/optype';
import __ from './locale';

// 异常码对应中文描述，用于在国际化资源中查找对应信息
// 国际化资源需要在locale中定义
const ErrorKeyHash = {
    10001: '添加失败，指定的站点无法连接。',
    10002: '添加失败，指定的站点未开启多站点模式。',
    10003: '该站点名已被占用，请重新输入。',
    10005: '添加失败，指定的站点已属于其它的分布式系统。',
    10009: '添加失败，指定的站点已属于其它的分布式系统。',
    10010: '当前站点不是总站点，可能是未开启多站点模式或已被其他站点添加。',
    10014: '添加失败，您输入的站点密钥不正确。',
    10017: '不能添加本站点。',
    10019: '该站点已存在，不能重复添加。',
    10020: '添加失败，指定的站点尚未激活授权码。',
    20101: '用户名不合法，可能字符过长或包含 \ / : * ? " < > | 特殊字符。',
    20110: '用户不存在。',
    20802: '当前模板中的共享者已不存在。',
    20105: '该用户名已被占用，请重新输入。',
    22103: '当前模板已不存在。',
    20215: '组织或部门不存在。',
    20806: 'SMTP配置有误，请到“[系统配置]-[第三方服务器]” 页面修改配置信息',
    20807: 'SMTP配置有误，请到“[系统配置]-[第三方服务器]” 页面修改配置信息',
    20808: 'SMTP配置有误，请到“[系统配置]-[第三方服务器]” 页面修改配置信息',
    20810: 'SMTP配置有误，请到“[系统配置]-[第三方服务器]” 页面修改配置信息',
    20811: 'SMTP配置有误，请到“[系统配置]-[第三方服务器]” 页面修改配置信息',
    20801: '测试邮件发送失败，请检查您的网络配置',
    20302: '该站点已被移除，请重新选择归属站点。',
    20153: '该用户名不可用，请重新输入。',
    20154: '该用户名已被管理员占用，请重新输入。',

    // 许可证配置相关错误码
    20517: '未知的授权码类型。',
    20504: '未知的授权码类型。',
    20501: '授权码 ${licenseCode} 与当前产品型号不匹配。',
    20502: '已存在相同的授权码 ${licenseCode} ，不能重复添加。',
    20505: '当前已存在基本件，无法添加新的基本件。',
    20506: '已存在测试授权码，请先删除测试授权码再添加正式授权码。',
    20509: '当前已存在测试授权码，无法添加新的测试授权码。',
    20508: '已存在正式授权码，无法添加测试授权码。',
    20526: '必须先添加相匹配的基本件，才能添加代理或选件。',
    20522: '添加的节点代理授权数，已超过当前产品型号限定的最大节点数。',
    20523: '添加的用户代理授权数，已超过当前产品型号限定的最大用户数。',
    20527: '只允许授权一个云盘NAS网关选件。',
    20512: '授权码已被激活。',
    20513: '激活码与授权码或机器码不匹配。',
    20514: '必须先激活相匹配的基本件，才能激活代理或选件。',
    20515: '未知的授权码类型。',
    22601: '短信服务器配置不合法。',
    22605: '不支持的短信服务器类型。',
    22610: '连接短信服务器失败。',
    20409: '不能重复导入组织',
    20419: '另一个第三方用户组织正在导入'
}


/**
 * 通过errcode查找资源文件的Key
 * @param errcode 异常码
 * @param optype 操作类型
 * @return 返回异常信息的Key
 */
function findLocale(errcode, optype: OpType = OpType.ALL): string {
    const match = ErrorKeyHash[errcode];

    if (!match) {
        return '未知的错误码';
    } else if (typeof match === 'string') {
        return match;
    } else {
        return match[optype] ? match[optype] : match[OpType.ALL]
    }
}


/**
 * 获取异常提示模版
 * @param errcode 异常码
 * @param optype 操作类型
 * @return 返回异常提示模版函数
 */
export function getErrorTemplate(errcode: number, optype: OpType = OpType.ALL): (Object) => string {
    return function (args) {
        return __(findLocale(errcode, optype), args);
    }
}


/**
 * 根据异常码获取异常提示
 * @param errcode 异常码
 * @param args 模版填充信息
 * @return 返回异常提示信息
 */
export function getErrorMessage(errcode: number, optype: OpType = OpType.ALL): string {
    return __(findLocale(errcode, optype)) || '';
}